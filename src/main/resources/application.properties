# Setup assumes Keycloak is used to create the necessary realm, client and user/pwd with roles.
keycloak.realm=mefit
keycloak.client-id=mefit-backend-application

# URI of the issuer (Identity Provider like Keycloak) that issued the JWT tokens.
# Used to validate the issuer of incoming JWT tokens.
# We will only accept tokens issued by this specified issuer. (DOCKER container)
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8083/realms/${keycloak.realm}

# URI of the JSON Web Key (JWK) Set.
# Contains the public keys used to verify the signatures of JWT tokens.
# We will use the keys from the JWK Set to verify the signatures of incoming JWT tokens.(DOCKER container)
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8083/realms/${keycloak.realm}/protocol/openid-connect/certs

# Keycloak LOCAL-SERVER
# set "http-port=8090" in "keycloak-22.0.1/bin/keycloak.conf" file
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8090/realms/${keycloak.realm}
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8090/realms/${keycloak.realm}/protocol/openid-connect/certs



# Cloud IAM - https://app.cloud-iam.com/
#spring.security.oauth2.resourceserver.jwt.issuer-uri=https://lemur-8.cloud-iam.com/auth/realms/${keycloak.realm}
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://lemur-8.cloud-iam.com/auth/realms/${keycloak.realm}/protocol/openid-connect/certs

#Database
spring.datasource.url=jdbc:postgresql://localhost:5432/meFitDb
spring.datasource.username=postgres
spring.datasource.password=postgres

#spring.datasource.url=${meFit_db}
#spring.datasource.username=${db_user}
#spring.datasource.password=${db_pw}

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=create

##Enable logging
spring.jpa.show-sql=true

##Enable seeding. Doesn't use schema.sql but relies on Hibernate to creat the schema

springdoc.swagger-ui.operationsSorter=method

spring.sql.init.platform=postgres
spring.jpa.defer-datasource-initialization= true
spring.sql.init.mode=always

